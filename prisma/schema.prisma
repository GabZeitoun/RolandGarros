datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("friend")
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  waitlistEntries Waitlist[]
  invitationsSent Invitation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  day       Int
  seat      Int
  session   String
  isVIP     Boolean  @default(false)
  status    String   @default("confirmed") // can be "confirmed", "waitlist", or "cancelled"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Waitlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  day       Int
  session   String
  isVIP     Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Invitation {
  id        String   @id @default(cuid())
  email     String   @unique
  role      String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id])
}

